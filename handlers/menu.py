from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from keyboards.menu_keyboards import products_keyboard, categories_keyboard, main_menu_keyboard
from states.cart_state import CartState
from data.products import products



router = Router()

@router.callback_query(lambda c: c.data.startswith("category_"))
async def show_products(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    category_key = callback.data.replace("category_", "")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å

    if category_key not in products[lang]:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!" if lang == "ru" else "Xatolik: kategoriya topilmadi!")
        return

    items = products[lang][category_key]  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    keyboard_buttons = [
        [types.InlineKeyboardButton(text=item, callback_data=f"product_{item}")]
        for item in items.keys()
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "üîô –ù–∞–∑–∞–¥"
    keyboard_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥" if lang == "ru" else "üîô Orqaga", callback_data="back_to_categories")])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –±—ã–ª–æ —Ñ–æ—Ç–æ)
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await callback.message.answer(
        f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_key}:" if lang == "ru" else f"{category_key} dagi mahsulotlar:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("product_"))
async def show_product_details(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    product_name = callback.data.replace("product_", "")
    category_name = None

    for category, items in products[lang].items():
        if product_name in items:
            category_name = category
            break

    if not category_name:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!" if lang == "ru" else "Xatolik: mahsulot topilmadi!")
        return

    product = products[lang][category_name][product_name]
    price = product["price"]
    photo = product.get("photo", None)

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É" if lang == "ru" else "üõí Savatga qo ªshish", callback_data=f"add_to_cart_{product_name}")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥" if lang == "ru" else "üîô Orqaga", callback_data=f"category_{category_name}")]
    ])

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç
    if photo:
        await callback.message.answer_photo(
            photo=photo,
            caption=f"<b>{product_name}</b>\nüí∞ –¶–µ–Ω–∞: {price} —Å—É–º" if lang == "ru" else f"<b>{product_name}</b>\nüí∞ Narxi: {price} so'm",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(
            f"<b>{product_name}</b>\nüí∞ –¶–µ–Ω–∞: {price} —Å—É–º" if lang == "ru" else f"<b>{product_name}</b>\nüí∞ Narxi: {price} so'm",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

@router.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    categories_list = products[lang].keys()

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=category, callback_data=f"category_{category}")]
            for category in categories_list
        ]
    )

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üçΩÔ∏è:" if lang == "ru" else "Kategoriya tanlang üçΩÔ∏è:",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "Amalni tanlang:", reply_markup=main_menu_keyboard(lang))


@router.callback_query(lambda c: c.data.startswith("add_to_cart_"))
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")

    product_name = callback.data.replace("add_to_cart_", "")

    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    category_name = None
    for category, items in products[lang].items():
        if product_name in items:
            category_name = category
            break

    if not category_name:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!" if lang == "ru" else "Xatolik: mahsulot topilmadi!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É
    cart = data.get("cart", {})

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    if product_name in cart:
        cart[product_name]["quantity"] += 1
    else:
        cart[product_name] = {
            "quantity": 1,
            "price": products[lang][category_name][product_name]["price"]
        }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(cart=cart)

    await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!" if lang == "ru" else "‚úÖ Mahsulot savatga qo ªshildi!")

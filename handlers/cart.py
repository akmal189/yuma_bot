from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.menu_keyboards import categories_keyboard, main_menu_keyboard, cart_keyboard_with_delete
from config import ADMIN_ID

router = Router()

@router.callback_query(lambda c: c.data == "show_cart")
async def inline_show_cart(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart = data.get("cart", [])

    if cart:
        total = sum(item["price"] for item in cart if "price" in item)
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        for item in cart:
            text += f"- {item['name']} ‚Äî {item['price']} —Å—É–º\n"
        text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {total} —Å—É–º</b>"
        await callback.message.edit_text(text, reply_markup=cart_keyboard_with_delete(cart), parse_mode="HTML")
    else:
        await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", reply_markup=main_menu_keyboard())

@router.callback_query(lambda c: c.data.startswith("remove_item:"))
async def remove_item(callback: types.CallbackQuery, state: FSMContext):
    index = int(callback.data.split(":")[1])
    data = await state.get_data()
    cart = data.get("cart", [])
    
    if 0 <= index < len(cart):
        removed_item = cart.pop(index)
        await state.update_data(cart=cart)
        await callback.answer(f"–£–¥–∞–ª–µ–Ω–æ: {removed_item['name']}")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    if cart:
        total = sum(item["price"] for item in cart)
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        for item in cart:
            text += f"- {item['name']} ‚Äî {item['price']} —Å—É–º\n"
        text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {total} —Å—É–º</b>"
        await callback.message.edit_text(text, reply_markup=cart_keyboard_with_delete(cart), parse_mode="HTML")
    else:
        await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", reply_markup=main_menu_keyboard())

@router.callback_query(lambda c: c.data == "pay_online")
async def pay_online(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: https://example.com/pay")
    await send_order_to_admin(callback, state)

@router.callback_query(lambda c: c.data == "pay_cash")
async def pay_cash(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!")
    await send_order_to_admin(callback, state)

@router.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())

async def send_order_to_admin(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart = data.get("cart", [])
    if not cart:
        return
    
    total = sum(item["price"] for item in cart)
    comment = data.get("comment", "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
    phone = data.get("phone_number", "–ù–µ —É–∫–∞–∑–∞–Ω")
    order_text = f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {callback.from_user.first_name}, @{callback.from_user.username}:\n"
    order_text += f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
    for item in cart:
        order_text += f"- {item['name']} ‚Äî {item['price']} —Å—É–º\n"

    order_text += f"\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    order_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total} —Å—É–º"
    
    await callback.bot.send_message(chat_id=ADMIN_ID, text=order_text)
    await state.update_data(cart=[])  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É


class CartStates(StatesGroup):
    waiting_for_comment = State()


@router.callback_query(lambda c: c.data == "add_comment")
async def ask_comment(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:")
    await state.set_state(CartStates.waiting_for_comment)

@router.message(CartStates.waiting_for_comment)
async def save_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)

    data = await state.get_data()
    cart = data.get("cart", [])
    total = sum(item["price"] for item in cart) if cart else 0

    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    if cart:
        for index, item in enumerate(cart):
            text += f"{index+1}. {item['name']} ‚Äî {item['price']}‚ÇΩ\n"
        text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    else:
        text += "\n–ü—É—Å—Ç–æ."

    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω! üìù")
    await message.answer(text, reply_markup=cart_keyboard_with_delete(cart))
    await state.set_state(None)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

async def update_cart(state: FSMContext, item: dict):
    data = await state.get_data()
    cart = data.get("cart", [])
    cart.append({
        "name": item["name"],
        "price": item["price"]
    })
    await state.update_data(cart=cart)
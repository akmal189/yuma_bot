from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from keyboards.menu_keyboards import categories_keyboard, cart_keyboard_with_delete, start_keyboard, language_keyboard
from aiogram.fsm.context import FSMContext
from states.cart_state import CartState
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from config import ADMIN_ID
from localization import get_message
from states.language_state import LanguageState
from data.products import products

router = Router()

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å @router.message(CommandStart())
@router.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language")
    phone_number = data.get("phone_number")

    if lang and phone_number:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(get_message("menu.welcome", lang), reply_markup=start_keyboard(lang))
        return
    
    if not lang:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å
        await state.clear()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\nIltimos tilni tanlang:", reply_markup=language_keyboard())
        await state.set_state(LanguageState.choose_language)
    else:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –µ—Å—Ç—å, –Ω–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä
        await proceed_to_phone(message, state, lang)

async def proceed_to_phone(message: types.Message, state: FSMContext, lang: str):
    data = await state.get_data()
    phone_number = data.get("phone_number")

    if phone_number:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(get_message("menu.welcome", lang), reply_markup=start_keyboard(lang))
    else:
        # –ü—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=get_message("menu.share_phone", lang), request_contact=True)]],
            resize_keyboard=True
        )
        await message.answer(get_message("menu.request_phone", lang), reply_markup=keyboard)

# –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
@router.message(LanguageState.choose_language, F.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π")
async def set_language_ru(message: types.Message, state: FSMContext):
    await state.update_data(language="ru")
    await proceed_to_phone(message, state, "ru")

# –î–ª—è —É–∑–±–µ–∫—Å–∫–æ–≥–æ
@router.message(LanguageState.choose_language, F.text == "üá∫üáø O'zbekcha")
async def set_language_uz(message: types.Message, state: FSMContext):
    await state.update_data(language="uz")
    await proceed_to_phone(message, state, "uz")

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å @router.message(F.contact) ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞:
@router.message(F.contact)
async def save_phone(message: types.Message, state: FSMContext, bot):
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)

    data = await state.get_data()
    lang = data.get("language", "ru")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
    await message.answer(get_message("menu.phone_saved", lang), reply_markup=start_keyboard(lang))

@router.callback_query(lambda c: c.data == "show_categories")
async def show_categories(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_keyboard())

@router.message(lambda message: message.text == "üçî –ú–µ–Ω—é" or message.text == "üçî Menu")
async def show_categories(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")

    categories_list = products[lang].keys()

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=category, callback_data=f"category_{category}")]
            for category in categories_list
        ]
    )

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üçΩÔ∏è:" if lang == "ru" else "Kategoriya tanlang üçΩÔ∏è:",
        reply_markup=keyboard
    )


@router.message(lambda message: message.text in ["üõí –ö–æ—Ä–∑–∏–Ω–∞", "üõí Savat"])
async def show_cart_button(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    cart = data.get("cart", {})
    comment = data.get("comment", None)

    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n" if lang == "ru" else "üõí Sizning savatingiz:\n\n"
    total_price = 0

    if cart:
        for product, details in cart.items():
            quantity = details["quantity"]
            price = details["price"]
            total = quantity * price
            total_price += total
            cart_text += f"üîπ {product} ‚Äî {quantity} —à—Ç. x {price} —Å—É–º = {total} —Å—É–º\n"

        cart_text += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Å—É–º" if lang == "ru" else f"\nüí∞ Jami: {total_price} sum"

        if comment:
            cart_text += f"\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}" if lang == "ru" else f"\nüìù Izoh: {comment}"

        await message.answer(cart_text, reply_markup=cart_keyboard_with_delete(cart, lang))
    else:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!" if lang == "ru" else "üõí Savatingiz bo ªsh!")
